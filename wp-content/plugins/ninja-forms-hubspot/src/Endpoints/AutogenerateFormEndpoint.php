<?php

namespace NFHubspot\Endpoints;

// NF Bridge
use NFHubspot\EmailCRM\NfBridge\Actions\AutogenerateForm;

// REST API
use NFHubspot\EmailCRM\RestApi\Endpoint;
use NFHubspot\EmailCRM\RestApi\Response;
use NFHubspot\EmailCRM\RestApi\Contracts\RequestContract;
use NFHubspot\EmailCRM\RestApi\Contracts\ResponseContract;
use NFHubspot\EmailCRM\RestApi\Contracts\AuthorizeRequestContract;


/**
 * Endpoint to handle a form autogenerate request
 */
class AutogenerateFormEndpoint extends Endpoint {

    /**
     *
     * @var AutogenerateForm
     */
    protected $autogenerateForm;

    /**
     *
     * @var AuthorizeRequestContract
     */
    protected $authorizer;

    /**
     * Set the autogenerate form
     *
     * @param AutogenerateForm $autogenerateForm
     */
    public function setAutogenerateForm(AutogenerateForm $autogenerateForm):AutogenerateFormEndpoint {
        $this->autogenerateForm = $autogenerateForm;
        return $this;
    }

    /**
     * Add an authorizer that ensures source of request is authorized
     * 
     * @param AuthorizeRequestContract $authorizer
     */
    public function addAuthorizer(AuthorizeRequestContract $authorizer):AutogenerateFormEndpoint {
        $this->authorizer = $authorizer;
        return $this;
    }

    /** @inheritDoc */
    public function getHttpMethod(): string {
        return 'POST';
    }

    /** @inheritDoc */
    public function getArgs(): array {
        return [
            'formTitle' => [
                'type' => 'string',
                'required' => false,
            ]
        ];
    }

    /** @inheritDoc */
    public function getUri(): string {
        return 'nf-autogenerate/';
    }

    /**
     * Authorize the request
     *
     * @param RequestContract $request
     * @return bool
     */
    public function authorizeRequest(RequestContract $request): bool {
        return $this->authorizer->authorizeRequest($request);
    }

    /** @inheritDoc */
    public function handleRequest(RequestContract $request): ResponseContract {

        $formTitle = !is_null($request->getParam('formTitle')) ? urldecode($request->getParam('formTitle')) : __('Your Autogenerated Form','ninja-forms-hubspot');
        try {
            $this->autogenerateForm->handle($formTitle);
            $formId = $this->autogenerateForm->getFormId();
            $response = Response::fromArray(
                            [
                                'data' => ['formId' => $formId],
                                'status' => 200
                            ]
            );
            wp_redirect(admin_url() . '?page=ninja-forms&form_id=' . $formId);
            exit();

            return $response;
        } catch (\Exception $exception) {
            $response = $this->constructExceptionResponse($exception, 'AutogenerateForm');
            return $response;
        }
    }

    /**
     * Construct exception response from given exception
     * @param \Exception $exception
     * @param string $context
     * @return ResponseContract
     */
    protected function constructExceptionResponse($exception, string $context = ''): ResponseContract {
        $response = new Response();
        $exceptionString = $exception->getMessage();


        $data = [
            'message' => $exceptionString,
            'context' => $context
        ];

        $response->setData($data);

        $response->setStatus($exception->getCode() ? (int) $exception->getCode() : 500);
        return $response;
    }

}
